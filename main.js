(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function t(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var n=function(){function n(e,o,r,i,a,c){var u=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),t(this,"_likeLoaderWrapper",(function(e,t,n){u._handleLikeClick(e,t,n).then((function(e){var t=e.likes;u._likes=t}))})),t(this,"render",void 0),this._item=e,this._name=this._item.name,this._link=this._item.link,this._cardId=this._item._id,this._ownerId=this._item.owner._id,this._likes=e.likes,this._cardSelector=o,this._cardElement=document.querySelector(this._cardSelector),this._handleCardClick=r,this._handleDeleteClick=i,this._handleLikeClick=a,this._myId=c}var o,r;return o=n,(r=[{key:"_getTemplate",value:function(){return this._cardElement.content.querySelector(".element").cloneNode(!0)}},{key:"_clickLikeButton",value:function(){this._element.querySelector(".element__like").classList.toggle("element__like_active")}},{key:"_clickRemoveButton",value:function(){this._element.remove()}},{key:"_checkIdCard",value:function(e){e===this._myId?this.showDeleteButtonCard():this._cardElement.content.querySelector(".element__delete").classList.remove("element__delete_visible")}},{key:"showDeleteButtonCard",value:function(){this._cardElement.content.querySelector(".element__delete").classList.add("element__delete_visible")}},{key:"_checkLike",value:function(){var e=this;return this._likes.some((function(t){return t._id===e._myId}))}},{key:"addLike",value:function(){this._element.querySelector(".element__like").classList.add("element__like_active")}},{key:"removeLike",value:function(){this._element.querySelector(".element__like").classList.remove("element__like_active")}},{key:"countLikes",value:function(e){this._element.querySelector(".element__counter").textContent=e.length}},{key:"checkMylike",value:function(){this._checkLike()?this.addLike():this.removeLike()}},{key:"_setEventListeners",value:function(){var e=this,t=this._element.querySelector(".element__delete"),n=this._element.querySelector(".element__like"),o=this._element.querySelector(".element__img");t.addEventListener("click",(function(){var t=e._element;e._handleDeleteClick(e._item,t)})),n.addEventListener("click",(function(){e._likeLoaderWrapper(e._item,e,e._checkLike())})),o.addEventListener("click",(function(){e._handleCardClick(e._link,e._name)}))}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._element.querySelector(".element__caption").textContent=this._name,this._element.setAttribute("id",this._cardId),this._element.querySelector(".element__img").setAttribute("src","".concat(this._link)),this._element.querySelector(".element__img").setAttribute("alt","".concat(this._name)),this._checkIdCard(this._ownerId),this.showDeleteButtonCard(this._item),this._setEventListeners(),this.countLikes(this._likes),this.checkMylike(),this._element}}])&&e(o.prototype,r),n}();function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var r=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._validationForm=n,this._validationConig=t,this._formSelector=t.formSelector,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._error=this._validationForm.querySelector(this._inputErrorClass),this._inputList=this._validationForm.querySelectorAll(this._inputSelector)}var t,n;return t=e,(n=[{key:"_showInputError",value:function(e){this._validationForm.querySelector("#".concat(e.id,"-error")).textContent=e.validationMessage,e.classList.add(this._inputErrorClass)}},{key:"_hideInputError",value:function(e){this._validationForm.querySelector("#".concat(e.id,"-error")).textContent="",e.classList.remove(this._inputErrorClass)}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_setEventListener",value:function(){var e=this;this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e.setButtonState(e._validationConig)}))}))}},{key:"setButtonState",value:function(){var e=this._validationForm.querySelector(this._formSelector).checkValidity(),t=this._validationForm.querySelector(this._submitButtonSelector);e?(t.classList.remove(this._inactiveButtonClass),t.disabled=!1):(t.classList.add(this._inactiveButtonClass),t.disabled=!0)}},{key:"enableValidation",value:function(){this._setEventListener()}},{key:"clearError",value:function(){var e=this;this._inputList.forEach((function(t){e._hideInputError(t),e._validationForm.querySelectorAll("#".concat(t.id,"-error")).forEach((function(e){e.textContent=""}))}))}}])&&o(t.prototype,n),e}();function i(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var a=function(){function e(t,n){var o=t.items,r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=o,this._renderer=r,this._container=n}var t,n;return t=e,(n=[{key:"renderCard",value:function(e){this._renderer(e)}},{key:"addItem",value:function(e){this._container.append(e)}},{key:"addNewItem",value:function(e){this._container.prepend(e)}}])&&i(t.prototype,n),e}();function c(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var l=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),u(this,"_closePopupByEscape",(function(e){"Escape"===e.key&&n.close()})),u(this,"_closeByOverlay",(function(e){e.target.classList.contains("popup_visible")&&n.close()})),this._popupElement=t,this._popupContainer=this._popupElement.querySelector(".popup__container_type_form")}var t,n;return t=e,(n=[{key:"open",value:function(){this._popupElement.classList.add("popup_visible"),this._handleEscClose(),this._handleOverlayClose()}},{key:"close",value:function(){this._popupElement.classList.remove("popup_visible"),this._removeListeners()}},{key:"_handleEscClose",value:function(){document.addEventListener("keydown",this._closePopupByEscape)}},{key:"_handleOverlayClose",value:function(){document.addEventListener("click",this._closeByOverlay)}},{key:"_removeListeners",value:function(){document.removeEventListener("keydown",this._closePopupByEscape),document.removeEventListener("click",this._closeByOverlay)}},{key:"setEventListeners",value:function(){var e=this;this._popupElement.querySelector(".popup__button-close").addEventListener("click",(function(){e.close()}))}}])&&c(t.prototype,n),e}();function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function f(e,t,n){return(f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var o=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=d(e)););return e}(e,t);if(o){var r=Object.getOwnPropertyDescriptor(o,t);return r.get?r.get.call(n):r.value}})(e,t,n||e)}function _(e,t){return(_=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function h(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_(e,t)}(a,e);var t,n,o,r,i=(o=a,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=d(o);if(r){var n=d(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return h(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._popupCardImage=t._popupElement.querySelector(".popup__picture"),t._captionImage=t._popupElement.querySelector(".popup__picture-caption"),t}return t=a,(n=[{key:"open",value:function(e,t){f(d(a.prototype),"open",this).call(this),this._popupCardImage.src=e,this._captionImage.alt=t,this._captionImage.textContent=t}}])&&p(t.prototype,n),a}(l);function m(e){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function v(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function b(e,t,n){return(b="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var o=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=E(e)););return e}(e,t);if(o){var r=Object.getOwnPropertyDescriptor(o,t);return r.get?r.get.call(n):r.value}})(e,t,n||e)}function k(e,t){return(k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function S(e,t){return!t||"object"!==m(t)&&"function"!=typeof t?g(e):t}function g(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var L=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&k(e,t)}(a,e);var t,n,o,r,i=(o=a,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=E(o);if(r){var n=E(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return S(this,e)});function a(e,t){var n,o,r,c;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),c=function(e){e.preventDefault();var t=n._getInputValues();n._callBackSubmitForm(t)},(r="_formSubmit")in(o=g(n=i.call(this,e)))?Object.defineProperty(o,r,{value:c,enumerable:!0,configurable:!0,writable:!0}):o[r]=c,n._callBackSubmitForm=t,n._popupContainer=n._popupElement.querySelector(".popup__container_type_form"),n._popupInputList=n._popupContainer.querySelectorAll(".popup__field"),n._buttonSubmit=n._popupElement.querySelector(".popup__button-submit"),n._normalButtonText=n._buttonSubmit.textContent,n}return t=a,(n=[{key:"_getInputValues",value:function(){var e={};return this._popupInputList.forEach((function(t){e[t.name]=t.value})),e}},{key:"setEventListenerSubmitConfirmation",value:function(e,t){var n=this;b(E(a.prototype),"setEventListeners",this).call(this),this._popupContainer.addEventListener("submit",(function o(r){r.preventDefault(),n._callBackSubmitForm(e,t),n._popupContainer.removeEventListener("submit",o)}))}},{key:"setEventListeners",value:function(){b(E(a.prototype),"setEventListeners",this).call(this),this._popupContainer.addEventListener("submit",this._formSubmit)}},{key:"close",value:function(){b(E(a.prototype),"close",this).call(this),this._popupContainer.reset()}},{key:"renderLoading",value:function(e){this._buttonSubmit.textContent=e?"".concat(this._buttonSubmit.textContent,"..."):this._normalButtonText}}])&&v(t.prototype,n),a}(l);function C(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var w=function(){function e(t){var n=t.profileNameSelector,o=t.profileJobSelector,r=t.profileAvatarButton;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._profileName=document.querySelector(n),this._profileJob=document.querySelector(o),this._profileAvatarButton=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._profileName.textContent,about:this._profileJob.textContent}}},{key:"setUserInfo",value:function(e){this._profileName.textContent=e.name,this._profileJob.textContent=e.about}},{key:"setUserAvatar",value:function(e){this._profileAvatarButton.style.backgroundImage="url(".concat(e.avatar,")")}}])&&C(t.prototype,n),e}();function O(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var I=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=t,this._token=n}var t,n;return t=e,(n=[{key:"_getResponseData",value:function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}},{key:"getAllInitialCards",value:function(){var e=this;return fetch("".concat(this._url,"cards"),{method:"GET",headers:{authorization:this._token,"content-type":"application/json"}}).then((function(t){return e._getResponseData(t)}))}},{key:"addCard",value:function(e){var t=this;return fetch("".concat(this._url,"cards/"),{method:"POST",headers:{authorization:this._token,"content-type":"application/json"},body:JSON.stringify(e)}).then((function(e){return t._getResponseData(e)}))}},{key:"getInfoProfile",value:function(){var e=this;return fetch("".concat(this._url,"users/me"),{method:"GET",headers:{authorization:this._token,"content-type":"application/json"}}).then((function(t){return e._getResponseData(t)}))}},{key:"addInfoProfile",value:function(e){var t=this;return fetch("".concat(this._url,"users/me"),{method:"PATCH",headers:{authorization:this._token,"content-type":"application/json"},body:JSON.stringify({name:e.name,about:e.about})}).then((function(e){return t._getResponseData(e)}))}},{key:"addInfoProfileAvatar",value:function(e){var t=this;return fetch("".concat(this._url,"users/me/avatar"),{method:"PATCH",headers:{authorization:this._token,"content-type":"application/json"},body:JSON.stringify({avatar:e.avatar})}).then((function(e){return t._getResponseData(e)}))}},{key:"deleteCard",value:function(e){var t=this;return fetch("".concat(this._url,"cards/").concat(e),{method:"DELETE",headers:{authorization:this._token,"content-type":"application/json"}}).then((function(e){return t._getResponseData(e)}))}},{key:"putLike",value:function(e){var t=this;return fetch("".concat(this._url,"cards/likes/").concat(e),{method:"PUT",headers:{authorization:this._token,"content-type":"application/json"}}).then((function(e){return t._getResponseData(e)}))}},{key:"deleteLike",value:function(e){var t=this;return fetch("".concat(this._url,"cards/likes/").concat(e),{method:"DELETE",headers:{authorization:this._token,"content-type":"application/json"}}).then((function(e){return t._getResponseData(e)}))}}])&&O(t.prototype,n),e}(),P=document.querySelector(".profile__button-info-eddit"),q=document.querySelector(".profile__button-add"),j=document.querySelector(".popup_type_edit-form"),B=document.querySelector(".popup_type_img"),R=document.querySelector(".popup_type_card"),D=document.querySelector(".popup_type_avatar"),T=document.querySelector(".popup_type_card-delete"),A=document.querySelector(".popup__container_type_eddit-form"),x=A.querySelector(".popup__field_type_name"),F=A.querySelector(".popup__field_type_job"),N=document.querySelector(".elements"),U=document.querySelector(".profile__avatar-img"),V={formSelector:".popup__container_type_form",formSelectorForm:".popup_type_card popup__container_type_eddit-form popup__container_type_avatar",inputSelector:".popup__field",submitButtonSelector:".popup__button-submit",inactiveButtonClass:"popup__button-submit_type_invalid",inputErrorClass:"popup__field_type_error"},z=new I("https://mesto.nomoreparties.co/v1/cohort-20/","4056c30d-f7e0-4f36-a996-b3ca58e8ceb0"),J=new r(V,D),M=new r(V,R),G=new r(V,j),H=new l(T),W=new y(B),K=new L(j,(function(e){K.renderLoading(!0),z.addInfoProfile(e).then((function(){Y.setUserInfo(e),K.close()})).catch((function(e){console.log(e,"Ошибка из handlePopupProfileSubmit")})).finally((function(){K.renderLoading(!1)}))})),Q=new L(R,(function(e){var t=new a({items:e,renderer:function(){Q.renderLoading(!0),z.addCard(e).then((function(e){var n=Z(e).generateCard();t.addNewItem(n)})).catch((function(e){console.log(e,"ошибка в addNewObjectCard")})).finally((function(){Q.renderLoading(!1)}))}},N);t.renderCard(),Q.close()})),X=new L(D,(function(e){X.renderLoading(!0),z.addInfoProfileAvatar(e).then((function(e){Y.setUserAvatar(e),X.close()})).catch((function(e){console.log(e,"err из handlePopupAvatareSubmit")})).finally((function(){X.renderLoading(!1)}))})),Y=new w({profileNameSelector:".profile__info-name",profileJobSelector:".profile__info-job",profileAvatarButton:".profile__avatar-img"});function Z(e,t){return new n(e,".template",$,ee,ne,t)}function $(e,t){W.open(e,t)}function ee(e,t){H.open(),new L(T,te).setEventListenerSubmitConfirmation(e,t)}function te(e,t){z.deleteCard(e._id).then((function(){t.remove(),H.close()})).catch((function(e){console.log(e,"err из handlePopupDeleteSubmit")}))}function ne(e,t,n){return n?z.deleteLike(e._id).then((function(e){return t.removeLike(),t.countLikes(e.likes),e})).catch((function(e){console.log(e)})):z.putLike(e._id).then((function(e){return t.addLike(),t.countLikes(e.likes),e})).catch((function(e){console.log(e)}))}Q.setEventListeners(),K.setEventListeners(),W.setEventListeners(),X.setEventListeners(),P.addEventListener("click",(function(){x.value=Y.getUserInfo().name,F.value=Y.getUserInfo().about,K.open(),G.clearError(),G.setButtonState()})),q.addEventListener("click",(function(){Q.open(),M.setButtonState(),M.clearError()})),U.addEventListener("click",(function(){X.open(),J.setButtonState(),J.clearError()})),J.enableValidation(),M.enableValidation(),G.enableValidation(),Promise.all([z.getInfoProfile(),z.getAllInitialCards()]).then((function(e){var t=e[0],n=e[0]._id,o=e[1],r=new a({items:o,renderer:function(){o.forEach((function(e){var t=Z(e,n);t._checkIdCard(e.owner._id);var o=t.generateCard();r.addItem(o)}))}},N);r.renderCard(),Y.setUserInfo(t),Y.setUserAvatar(t)})).catch((function(e){console.log(e)})).finally((function(){K.renderLoading(!1)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,